/*
 * FILE: _theme-applier.scss
 *
 * This file contains mixins for applying theme tokens, generating CSS variables,
 * and creating utility classes based on the theme configuration.
 * 
 * MIXINS:
 * - generateThemeVariables: Applies tokens for a specified type or all types if
 *   no type is specified.
 * - generateTokenVariables: Generates CSS custom properties for a specific token,
 *   optionally processing values with a function.
 * - generateThemeUtilities: Generates utility classes for theme tokens.
 * - generateThemeSpacingUtilities:  * Generates custom utility classes for 
 *   spacing-related theme tokens.

 *
 * VARIABLES:
 * - $token-type: Maps different token types and their associated keys.
 * - $exception-exclude-base-suffix: List of tokens excluding the base suffix from
 *   CSS custom property names.
 * - $exception-raw-value-groups: List of groups that use raw values instead of
 *   CSS variables.
 * - $exception-utility-properties: Defines exceptions for certain properties,
 *   allowing alternative names and modifications to the property.
 * - $utility-spacing-tokens: List of layout utility classes and their associated
 *   spacing tokens.
 */

// Import theme configuration and tokens
@use "../00-settings/theme-config.scss" as config;
@use "../00-settings/color-theme.scss" as color-theme;

// Import functions for generating variables
@use "../10-functions/select-theme.scss" as *;
@use "../10-functions/transform-color-p3" as *;

// Import Sass modules and helper functions
@use "sass:map";
@use "sass:list";
@use "sass:string";
@use "sass:meta";
@use "../10-functions/helpers/handle-string.scss" as help-str;

// Define token types and their associated keys
$token-type: (
  // "global": (),
  "contextual-generic":
    ("color-theme", "font-size", "space-gutter", "space-region"),
  // "component-specific": (),
  // "contextual-content": (),
);

// List of tokens excluding the base suffix from CSS custom property names
$exception-exclude-base-suffix: (
  "space-gutter",
  "space-region",
  "border",
  "border-radius",
  "transition"
);

// List of groups that use raw values instead of CSS variables
// For tokens using shorthand properties that include properties which could be overwritten
$exception-raw-value-groups: ("border");

// Define exceptions for properties, allowing alternative names and property modifications
$exception-utility-properties: (
  "color": (
    "alt-name": "text",
    "alt-property": "color",
  ),
  "background-color": (
    "alt-name": "background",
    "alt-property": "background-color",
  ),
  "border-radius": (
    "alt-name": "radius",
    "alt-property": "border-radius",
  ),
);

// List of layout utility classes and their associated spacing tokens
$utility-spacing-tokens: (
  "scale-space": (
    "flow",
    "stack",
  ),
  "space-gutter": (
    "cluster",
    "wrapper",
  ),
  "space-region": (
    "region",
  ),
);

/**
 * Mixin: generateThemeVariables
 * Applies tokens for a specified type or all types if no type is specified.
 *
 * @param {String|null} $type - Type of tokens to apply (e.g., "global",
 *                              "contextual-generic"). If "global" is passed,
 *                              generates all tokens that don't have a type.
 *                              If a specific type is passed, generates only
 *                              the tokens for that type. If no type is passed,
 *                              generates all tokens as they come.
 */
@mixin generateThemeVariables($type: null) {
  @each $group in config.$groups {
    $group-key: map.get($group, "key");

    @if $type == null {
      // Generate all tokens as they come
      @include generateTokenVariables($group-key);
    } @else if $type == "global" {
      // Generate all tokens that don't have a type
      $isInType: false;
      @if meta.variable-exists(token-type) {
        @each $current-type, $keys in $token-type {
          @if list.index($keys, $group-key) {
            $isInType: true;
          }
        }
      }
      @if not $isInType {
        @include generateTokenVariables($group-key);
      }
    } @else {
      // Generate only the tokens for the specified type
      @if meta.variable-exists(token-type) and
        list.index(map.get($token-type, $type), $group-key)
      {
        @include generateTokenVariables($group-key);
      }
    }
  }
}

/**
 * Mixin: generateTokenVariables
 * Generates CSS custom properties for a specific token.
 *
 * @param {String} $group-token-key - The token group key to generate vars.
 * @param {Function|null} $function - Optional function to process values.
 * @param {String|null} $function-arg - Optional argument for the function.
 */
@mixin generateTokenVariables(
  $group-token-key,
  $function: null,
  $function-arg: null
) {
  // Handle exceptions for the theme group-token-key
  @if $group-token-key == "color-theme" {
    @if $function == null {
      $function: "selectTheme";
    }
    @if $function-arg == null {
      $first-theme: list.nth(map.get(color-theme.$token, "items"), 1);
      $first-theme-name: map.get($first-theme, "name");
      $first-item-name: string.to-lower-case(list.nth($first-theme-name, 1));
      $function-arg: $first-item-name;
    }
  }

  // Loop through each group in the theme configuration
  @each $group in config.$groups {
    $group-key: map.get($group, "key");

    // Check if the current group matches the provided token key
    @if $group-key == $group-token-key {
      $group-prefix: help-str.slugify(map.get($group, "prefix"));
      $items: map.get(config.$theme, $group-token-key);

      // Loop through each item in the token
      @each $item-name, $item-value in $items {
        // Initialize result
        $result: null;

        // Apply function if provided and exists
        @if $function and meta.function-exists($function) {
          $result: meta.call(
            meta.get-function($function),
            $item-name,
            $item-value,
            if($function-arg != null, string.to-lower-case($function-arg), null)
          );
        } @else {
          // Warn if function not found, return item name and value without fn
          @if $function and not meta.function-exists($function) {
            @debug "Invalid function `#{$function}`.";
          }
          $result: (
            name: $item-name,
            value: $item-value,
          );
        }

        // Check if $result is not null
        @if $result != null {
          $item-name: map.get($result, "name");
          $item-value: map.get($result, "value");

          // Generate CSS custom properties, handling base exceptions
          @if $item-value != null {
            @if $item-name ==
              "base" and
              list.index($exception-exclude-base-suffix, $group-token-key)
            {
              --#{$group-prefix}: #{$item-value};
            } @else {
              --#{$group-prefix}-#{$item-name}: #{$item-value};
            }
          }
        }
      }
    }
  }
}

/**
 * Mixin: generateThemeUtilities
 * Generates utility classes for theme tokens.
 */
@mixin generateThemeUtilities() {
  // Loop through each group in the theme configuration
  @each $group in config.$groups {
    $group-key: map.get($group, "key");
    $group-prefix: map.get($group, "prefix");
    $group-properties: map.get($group, "properties");
    $items: map.get(config.$theme, $group-key);

    // Determine exception handling conditions
    $use-raw-values: list.index($exception-raw-value-groups, $group-key) !=
      null;
    $exclude-base-suffix: list.index(
        $exception-exclude-base-suffix,
        $group-key
      ) !=
      null;

    // Process group properties if they exist
    @if $group-properties != null {
      @each $group-property in $group-properties {
        $property-or-alt-name: $group-property;
        $css-property: $group-property;

        // Check if property has alternative definitions in exceptions
        @if map.has-key($exception-utility-properties, $group-property) {
          $property-or-alt-name: map.get(
            map.get($exception-utility-properties, $group-property),
            "alt-name"
          );
          $css-property: map.get(
            map.get($exception-utility-properties, $group-property),
            "alt-property"
          );
        }

        // Handle exceptions for specific groups
        @if $group-key == "scale-space" {
          $property-or-alt-name: help-str.initialsFromWords(
            help-str.listToString($group-property, "-")
          );

          .#{$property-or-alt-name}-auto {
            #{$css-property}: auto; // Apply auto value
          }
          .#{$property-or-alt-name}-zero {
            #{$css-property}: 0; // Apply zero value
          }
        }

        // Define prefix override for scale-step group
        @if $group-key == "scale-step" {
          $property-or-alt-name: $group-prefix;
        }

        // Process items if they exist
        @if $items != null {
          @if $group-key == "color-theme" {
            $first-theme: list.nth(map.get(color-theme.$token, "items"), 1);
            $theme-values: map.get($first-theme, "value");

            @each $context, $context-value in $theme-values {
              @each $context-key, $context-val in $context-value {
                $item-name: $context-key;
                $item-name-prop: $item-name;

                // Check for modifier, split item name, and extract the first part
                @if string.index($item-name, "--") {
                  $parts: help-str.stringToList($item-name, "--");
                  $item-name-prop: list.nth($parts, 1);
                }

                // Generate utility class for theme items
                @if $property-or-alt-name == $item-name-prop {
                  $item-name: help-str.stringReplace($item-name, "--", "-");

                  // Generate utility class for theme items
                  // @debug ".#{$context}-#{$item-name} | #{$css-property}: var(--#{$group-prefix}-#{$item-name})";
                  .#{$context}-#{$item-name} {
                    #{$css-property}: var(
                      --#{$group-prefix}-#{$context}-#{$item-name}
                    );
                  }
                }
              }
            }
          } @else {
            // General handling for other groups
            @each $item-name, $item-value in $items {
              @if $item-name == "base" and $exclude-base-suffix {
                @if $use-raw-values {
                  // Generate utility class for base value using raw value
                  // @debug ".#{$property-or-alt-name} | #{$css-property}: #{$item-value}";
                  .#{$property-or-alt-name} {
                    #{$css-property}: #{$item-value};
                  }
                } @else {
                  // Generate utility class for base value using CSS variable
                  // @debug ".#{$property-or-alt-name} | #{$css-property}: var(--#{$group-prefix})";
                  .#{$property-or-alt-name} {
                    #{$css-property}: var(--#{$group-prefix});
                  }
                }
              } @else {
                @if $use-raw-values {
                  // Generate utility class for other items using raw value
                  // @debug ".#{$property-or-alt-name}-#{$item-name} | #{$css-property}: #{$item-value}";
                  .#{$property-or-alt-name}-#{$item-name} {
                    #{$css-property}: #{$item-value};
                  }
                } @else {
                  // Generate utility class for other items using CSS variable
                  // @debug ".#{$property-or-alt-name}-#{$item-name} | #{$css-property}: var(--#{$group-prefix}-#{$item-name})";
                  .#{$property-or-alt-name}-#{$item-name} {
                    #{$css-property}: var(--#{$group-prefix}-#{$item-name});
                  }
                }
              }
            }
          }
        } @else {
          @debug "No items found for `#{$group-key}`.";
        }
      }
    }
  }
}

/**
 * Mixin: generateThemeSpacingUtilities
 * Generates custom utility classes for spacing-related theme tokens.
 */
@mixin generateThemeSpacingUtilities() {
  // Loop through the utility-spacing tokens
  @each $token-name, $utilities in $utility-spacing-tokens {
    $token: map.get(config.$theme, $token-name);
    $token-prefix: null;

    // Find the prefix for the token
    @each $group in config.$groups {
      @if map.get($group, "key") == $token-name {
        $token-prefix: map.get($group, "prefix");
      }
    }

    // If the token and prefix are found, generate the custom utility classes
    @if $token != null and $token-prefix != null {
      @each $utility in $utilities {
        $property: "--#{$utility}-space";

        // Generate utility classes for spacing-related theme items with zero value
        // @debug ".#{$utility}-space-zero | #{$property}: 0";
        .#{$utility}-space-zero {
          #{$property}: 0;
        }

        @each $item-name, $item-value in $token {
          // Check if the item name is "base"
          @if $item-name == "base" {
            // Generate utility class for spacing-related theme items with base value
            // @debug ".#{$utility}-space | #{$property}: var(--#{$token-prefix})";
            .#{$utility}-space {
              #{$property}: var(--#{$token-prefix});
            }
          } @else {
            // Generate utility classes for spacing-related theme items in layout utilities
            // @debug ".#{$utility}-space-#{$item-name} | #{$property}: var(--#{$token-prefix}-#{$item-name})";
            .#{$utility}-space-#{$item-name} {
              #{$property}: var(--#{$token-prefix}-#{$item-name});
            }
          }
        }
      }
    }
  }
}
