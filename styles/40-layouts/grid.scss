/*
 * GRID
 * A layout that provides a flexible grid system.
 * Info: https://every-layout.dev/layouts/grid/
 * 
 * CUSTOM PROPERTIES AND CONFIGURATION
 * --grid-placement: How many columns to create in the grid.
 * --grid-item-size-min: The minimum size of grid items.
 * --grid-space: The space between grid items.
 * 
 * A data attribute [data-grid="halves"] can be used to create a 50/50 split
 * layout.
 * A data attribute [data-grid="thirds"] can be used to create a three column
 * grid layout.
 * A data attribute [data-grid="subgrid"] can be used to create a subgrid layout
 * that inherits the row and column sizes from its parent grid.
 * --subgrid-rows: The number of rows a subgrid item should span.
 * --subgrid-columns: The number of columns a subgrid item should span.
 * --subgrid-space: The space between subgrid items.
 *   
 * Additional Resources:
 * https://daverupert.com/2022/07/solving-the-dangler-conundrum-with-has-and-container-queries/
 * https://www.youtube.com/watch?v=Zddz_R1RnfM
 */

.grid {
  display: grid;
  grid-template-columns: repeat(
    var(--grid-placement, auto-fill),
    minmax(min(var(--grid-item-size-min, 16rem), 100%), 1fr)
  );
  gap: var(--grid-space, var(--gutter));
  container-type: inline-size;

  &[data-grid="halves"] {
    --grid-placement: auto-fit;
    --grid-item-size-min: clamp(16rem, 50vw, 33rem);
  }

  &[data-grid="thirds"] {
    --grid-placement: auto-fit;
    --grid-item-size-min: clamp(16rem, 33%, 20rem);
  }

  // @supports (grid-template-rows: subgrid) {
  //   &[data-grid="subgrid"] > * {
  //     display: grid;
  //     grid-template-rows: subgrid;
  //     grid-row: span var(--subgrid-rows, 3);
  //     grid-column: span var(--subgrid-columns, 1);
  //     gap: var(--space-subgrid, var(--gutter));
  //   }
  // }
}
