// Import modules
@use "sass:math";

/**
 * Function: roundValue
 * Rounds a number to a specified number of decimal places.
 *
 * @param {Number} $number - The number to round.
 * @param {Number} $digits - The number of decimal places (default: 4).
 * @return {Number} - The rounded number.
 */
@function roundValue($number, $digits: 4) {
  $n: 1;
  // $number must be a number
  @if type-of($number) != number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }
  // $digits must be a unitless number
  @if type-of($digits) != number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  } @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }
  @for $i from 1 through $digits {
    $n: $n * 10;
  }
  @return math.div(round($number * $n), $n);
}

/**
 * Function: remToPx
 * Converts a rem value to pixels.
 *
 * @param {Number} $value - The rem value to convert.
 * @return {Number} - The equivalent value in pixels.
 */
@function remToPx($value) {
  @return $value * 16;
}

/**
 * Function: stripUnit
 * Removes the unit from a numeric value.
 *
 * @param {Number} $value - The value to strip the unit from.
 * @return {Number} - The unitless numeric value.
 */
@function stripUnit($value) {
  @if type-of($value) == "number" and not unitless($value) {
    @return math.div($value, $value * 0 + 1);
  }
  @return $value;
}

/**
 * Function: stringToNumber
 * Converts a string representation of a number to a numeric value.
 *
 * @param {String|Number} $value - The value to convert.
 * @return {Number} - The numeric value.
 */
@function stringToNumber($value) {
  @if type-of($value) == "number" {
    @return $value;
  } @else if type-of($value) != "string" {
    @error 'Invalid value `#{$value}` of type #{type-of($value)} for strToNumber. The value must be a number or a string.';
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == "-";
  $numbers: (
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
  );

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if (index(map-keys($numbers), $character) or $character == ".") {
      @if $character == "." {
        $digits: 1;
      } @else if $digits == 0 {
        $result: $result * 10 + map-get($numbers, $character);
      } @else {
        $digits: $digits * 10;
        $result: $result + calc(map-get($numbers, $character) / $digits);
      }
    }
  }

  @return if($minus, -$result, $result);
}
