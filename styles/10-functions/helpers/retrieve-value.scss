// Import Sass modules functions and helpers
@use "sass:map";
@use "sass:list";
@use "sass:meta";
@use "../process-token.scss" as *;
@use "../process-clamp.scss" as *;
@use "./handle-string.scss" as help-str;

// Import design tokens
@use "../../00-settings/scale-space.scss" as scale-space;
@use "../../00-settings/scale-step.scss" as scale-step;
@use "../../00-settings/viewport.scss" as viewport;

// Define exception list for tokens that require clamping
$exception-clamp-tokens: (
  map.get(scale-space.$token, "title"),
  map.get(scale-step.$token, "title")
);

/**
 * Function: tokenCssVariable
 * Retrieves the CSS variable for a given key, validates key, warns if invalid.
 * 
 * @param {String|null} $key - The key to retrieve the CSS variable for.
 * @param {Map|null} $token - The token map to search within.
 * @param {String|null} $token-prefix - The prefix for the CSS variable.
 * @param {Boolean} $exclude-base-suffix - Whether to exclude the base suffix.
 * @return {String|null} - The CSS variable or null if not found.
 */
@function tokenCssVariable(
  $key: null,
  $token: null,
  $token-prefix: null,
  $exclude-base-suffix: false
) {
  // Check if the token is null, warn and return null if true.
  @if $token == null {
    @warn "No token provided.";
    @return null;
  }

  // Check if token title is in exception list and process it accordingly.
  @if list.index($exception-clamp-tokens, map.get($token, "title")) {
    $viewport: processToken(viewport.$token);
    $token: processToken(processClamp($token, $viewport));
  } @else {
    $token: processToken($token);
  }

  // Retrieve token keys.
  $keys: map.keys($token);

  // Check if the key is null or empty, warn and return null if true.
  @if $key == null or list.length($key) == 0 {
    @warn "No value provided. Available options: #{$keys}.";
    @return null;
  }

  // Check if the token prefix is null, warn and return null if true.
  @if $token-prefix == null {
    @warn "No token prefix provided.";
    @return null;
  }

  // Convert $key to a string if it's a number and then to a slugified format.
  $key: if(meta.type-of($key) == "number", "#{ $key }", $key);
  $key: help-str.slugify(meta.inspect($key));

  // Validate key, return CSS variable or warn if invalid.
  @if list.index($keys, $key) {
    @if $key == "base" and $exclude-base-suffix {
      @return "var(--#{$token-prefix})";
    } @else {
      @return "var(--#{$token-prefix}-#{$key})";
    }
  } @else {
    @warn "Invalid value `#{$key}`. Available options: #{$keys}.";
    @return null;
  }
}
